// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\repository\vote_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "movie-festival/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVoteRepository is a mock of VoteRepository interface.
type MockVoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVoteRepositoryMockRecorder
}

// MockVoteRepositoryMockRecorder is the mock recorder for MockVoteRepository.
type MockVoteRepositoryMockRecorder struct {
	mock *MockVoteRepository
}

// NewMockVoteRepository creates a new mock instance.
func NewMockVoteRepository(ctrl *gomock.Controller) *MockVoteRepository {
	mock := &MockVoteRepository{ctrl: ctrl}
	mock.recorder = &MockVoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteRepository) EXPECT() *MockVoteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoteRepository) Create(userID, movieID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVoteRepositoryMockRecorder) Create(userID, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoteRepository)(nil).Create), userID, movieID)
}

// GetMostViewedGenre mocks base method.
func (m *MockVoteRepository) GetMostViewedGenre() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostViewedGenre")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostViewedGenre indicates an expected call of GetMostViewedGenre.
func (mr *MockVoteRepositoryMockRecorder) GetMostViewedGenre() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostViewedGenre", reflect.TypeOf((*MockVoteRepository)(nil).GetMostViewedGenre))
}

// GetMostVotedMovie mocks base method.
func (m *MockVoteRepository) GetMostVotedMovie() (*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostVotedMovie")
	ret0, _ := ret[0].(*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostVotedMovie indicates an expected call of GetMostVotedMovie.
func (mr *MockVoteRepositoryMockRecorder) GetMostVotedMovie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostVotedMovie", reflect.TypeOf((*MockVoteRepository)(nil).GetMostVotedMovie))
}

// GetUserVotes mocks base method.
func (m *MockVoteRepository) GetUserVotes(userID string) ([]entity.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVotes", userID)
	ret0, _ := ret[0].([]entity.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVotes indicates an expected call of GetUserVotes.
func (mr *MockVoteRepositoryMockRecorder) GetUserVotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVotes", reflect.TypeOf((*MockVoteRepository)(nil).GetUserVotes), userID)
}

// Remove mocks base method.
func (m *MockVoteRepository) Remove(voteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", voteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockVoteRepositoryMockRecorder) Remove(voteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockVoteRepository)(nil).Remove), voteID)
}
