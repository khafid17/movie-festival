// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\repository\movie_repository.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	entity "movie-festival/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieRepository) Create(movie *entity.Movie) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", movie)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMovieRepositoryMockRecorder) Create(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieRepository)(nil).Create), movie)
}

// GetMostViewed mocks base method.
func (m *MockMovieRepository) GetMostViewed() (*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostViewed")
	ret0, _ := ret[0].(*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostViewed indicates an expected call of GetMostViewed.
func (mr *MockMovieRepositoryMockRecorder) GetMostViewed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostViewed", reflect.TypeOf((*MockMovieRepository)(nil).GetMostViewed))
}

// List mocks base method.
func (m *MockMovieRepository) List(page, pageSize int) ([]*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page, pageSize)
	ret0, _ := ret[0].([]*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMovieRepositoryMockRecorder) List(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMovieRepository)(nil).List), page, pageSize)
}

// Search mocks base method.
func (m *MockMovieRepository) Search(query string) ([]*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMovieRepositoryMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMovieRepository)(nil).Search), query)
}

// TrackViewership mocks base method.
func (m *MockMovieRepository) TrackViewership(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackViewership", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackViewership indicates an expected call of TrackViewership.
func (mr *MockMovieRepositoryMockRecorder) TrackViewership(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackViewership", reflect.TypeOf((*MockMovieRepository)(nil).TrackViewership), id)
}

// Update mocks base method.
func (m *MockMovieRepository) Update(id int, movie *entity.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieRepositoryMockRecorder) Update(id, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieRepository)(nil).Update), id, movie)
}
